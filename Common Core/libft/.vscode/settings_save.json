{
    // FILES
    "files.autoSave": "afterDelay",
    "files.trimTrailingWhitespace": true,
    "files.insertFinalNewline": true,
    "files.trimFinalNewlines": false,

    // EDITOR
    "editor.guides.bracketPairs": "active",
    "editor.cursorSmoothCaretAnimation": "on",
    "editor.smoothScrolling": true,
    "editor.wordWrap": "on",
    "editor.insertSpaces": false,
    "editor.tabSize": 4,
    "editor.rulers": [80],
    "editor.lineNumbers": "on",
    "editor.renderWhitespace": "selection",
    "editor.detectIndentation": false,
    "editor.inlayHints.enabled": "off",
    "editor.minimap.enabled": false,
    "security.workspace.trust.untrustedFiles": "open",

    "[cpp]":{
        "editor.formatOnSave": true,
    },

    "[javascript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.formatOnSave": true,
    },

    "[c]": {
        "editor.wordBasedSuggestions": "off",
        "editor.suggest.insertMode": "replace",
        "editor.semanticHighlighting.enabled": true
    },

    "workbench.colorTheme": "GitHub Dark Default",
    "workbench.editorAssociations": {
        ".csv": "default"
    },

    "git.autofetch": true,
    "git.confirmSync": false,

    "github.copilot.enable": {
        // "c++": true,
    },

    "go.toolsManagement.autoUpdate": true,
    "scss.format.braceStyle": "expand",
    "[svelte]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[typescript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "svelte.enable-ts-plugin": true,
    "[json]": {
        "editor.defaultFormatter": "vscode.json-lang"

    },
    "sherlock.userId": "59c42001-323a-455a-9606-a343ece7e878",

    "pylint.args": [
        "--generated-members=cv2."
    ],
    {
        "codam-norminette-3.command": "norminette", // command that the highlighter executes to get the norm errors
        "codam-norminette-3.commandTimeoutMs": 10000, // Kill norminette process after this time (in ms) default 10000
        "codam-norminette-3.fileregex": "\\.[ch]$", // regex that matches the files you want to norm check
        "codam-norminette-3.ignoreErrors": [ // do not highlight these norm errors
            // "WRONG_SCOPE_COMMENT",
            // "LINE_TOO_LONG"
        ],
        "codam-norminette-3.highlight-color": "rgba(255, 0, 0, 0.2)", // highlight norm errors in custom color. Can be in rgba, hex, or vscode.ThemeColor format.
        "codam-norminette-3.displayErrorName": false // display name of error on hover
    }

    {
        "label": "Run Norminette",
        "type": "shell",
        "command": "norminette ${file}",
        "group": {
            "kind": "build",
            "isDefault": true
        },
        "problemMatcher": [],
        "runOptions": {
            "runOn": "fileSave"
        }
    }


	{
		"42header.username": string,
		"42header.email": string
	  }
}
